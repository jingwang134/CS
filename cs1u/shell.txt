ls /bin
cat /etc/passwd
sudo vi /etc/passwd
#/bin/false是最严格的禁止login选项,一切服务都不能用
'''
nobody:*:-2:-2:Unprivileged User:/var/empty:/usr/bin/false
root:*:0:0:System Administrator:/var/root:/bin/sh
daemon:*:1:1:System Services:/var/root:/usr/bin/false
_mysql:*:74:74:MySQL Server:/var/empty:/usr/bin/false
_sshd:*:75:75:sshd Privilege separation:/var/empty:/usr/bin/false
'''
1. 账号名称：即登陆时的用户名
2. 密码：早期UNIX系统的密码是放在这个文件中的，但因为这个文件的特性是所有程序都能够读取，所以，这样很容易造成数据被窃取，因此后来就将这个字段的密码数据改放到/etc/shadow中了
3. UID：用户ID，每个账号名称对应一个UID，通常UID=0表示root管理员
4. GID：组ID，与/etc/group有关，/etc/group与/etc/passwd差不多，是用来规范用户组信息的
5. 用户信息说明栏： 用来解释这个账号是干什么的
6. 家目录：home目录，即用户登陆以后跳转到的目录，以root用户为例，/root是它的家目录，所以root用户登陆以后就跳转到/root目录这里
7. Shell：用户使用的shell，通常使用/bin/bash这个shell，这也就是为什么登陆Linux时默认的shell是bash的原因，就是在这里设置的，如果要想更改登陆后使用的shell，可以在这里修改。另外一个很重要的东西是有一个shell可以用来替代让账号无法登陆的命令，那就是/sbin/nologin。

#由于我们实验室服务器开放了ftp服务，而我正好有一个ftp的账号，我看到我的账号信息是这样的
lxb:x:530:525::/opt/ftp:/sbin/nologin
用户名是lxb
x表示密码经过加密放到/etc/shadow文件中了
UID是530
GID是525
访问的目录是/opt/ftp
/sbin/nologin:我用root权限登陆到里面，把后面的/sbin/nologin改成了/bin/bash，重新用ssh进行登陆，真的登陆进去了，而且登陆后的目录正好是/opt/ftp。但是我的权限依旧没有改变，很多文件还是打不开。于是我明白了，这个nologin的作用就是限制某些用户通过ssh登陆到shell上

#时候为了进行系统维护工作，临时禁止其他用户登录，可以使用 nologin 文件，具体做法是在/etc/目录下创建一个名称为 nologin 的文件
touch /etc/nologin
